apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-connect
  labels:
    app: kafka-connect
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-connect
  template:
    metadata:
      labels:
        app: kafka-connect
    spec:
      initContainers:
      - name: download-connectors
        image: alpine:latest
        command: 
        - sh
        - -c
        - |
          apk add --no-cache curl unzip tar
          
          # Create plugins directory
          mkdir -p /kafka/connect/lib
          mkdir -p /kafka/connect/config
          
          # Download MongoDB connector
          echo "Downloading MongoDB connector..."
          curl -L -o /tmp/mongodb-kafka-connect.zip https://github.com/mongodb/mongo-kafka/releases/download/r2.0.1/mongodb-kafka-connect-mongodb-2.0.1.zip
          unzip /tmp/mongodb-kafka-connect.zip -d /tmp/
          cp -r /tmp/mongodb-kafka-connect-mongodb-2.0.1/lib/* /kafka/connect/lib/
          
          # Download Debezium MySQL connector plugin archive
          echo "Downloading Debezium MySQL connector..."
          curl -L -o /tmp/debezium-mysql-connector.tar.gz https://repo1.maven.org/maven2/io/debezium/debezium-connector-mysql/2.4.1.Final/debezium-connector-mysql-2.4.1.Final-plugin.tar.gz
          tar -xzf /tmp/debezium-mysql-connector.tar.gz -C /tmp/
          cp -r /tmp/debezium-connector-mysql/lib/* /kafka/connect/lib/
          
          # Copy any config files
          if [ -d "/tmp/mongodb-kafka-connect-mongodb-2.0.1/config" ]; then
            cp -r /tmp/mongodb-kafka-connect-mongodb-2.0.1/config/* /kafka/connect/config/
          fi
          if [ -d "/tmp/debezium-connector-mysql/config" ]; then
            cp -r /tmp/debezium-connector-mysql/config/* /kafka/connect/config/
          fi
          
          echo "Installed connectors:"
          ls -la /kafka/connect/lib/
        volumeMounts:
        - name: kafka-connect-plugins
          mountPath: /kafka/connect
      containers:
      - name: kafka-connect
        image: debezium/connect:2.4
        ports:
        - containerPort: 8083
        env:
        - name: BOOTSTRAP_SERVERS
          value: "kafka-service:9092"
        - name: GROUP_ID
          value: "connect-cluster"
        - name: CONFIG_STORAGE_TOPIC
          value: "connect-configs"
        - name: OFFSET_STORAGE_TOPIC
          value: "connect-offsets"
        - name: STATUS_STORAGE_TOPIC
          value: "connect-status"
        - name: CONFIG_STORAGE_REPLICATION_FACTOR
          value: "1"
        - name: OFFSET_STORAGE_REPLICATION_FACTOR
          value: "1"
        - name: STATUS_STORAGE_REPLICATION_FACTOR
          value: "1"
        - name: CONNECT_REST_ADVERTISED_HOST_NAME
          value: "kafka-connect-service"
        - name: CONNECT_PLUGIN_PATH
          value: "/kafka/connect"
        - name: CONNECT_REST_HOST_NAME
          value: "0.0.0.0"
        - name: CONNECT_REST_PORT
          value: "8083"
        - name: CONNECT_REST_ADVERTISED_PORT
          value: "8083"
        - name: CONNECT_KEY_CONVERTER
          value: "org.apache.kafka.connect.json.JsonConverter"
        - name: CONNECT_VALUE_CONVERTER
          value: "org.apache.kafka.connect.json.JsonConverter"
        - name: CONNECT_INTERNAL_KEY_CONVERTER
          value: "org.apache.kafka.connect.json.JsonConverter"
        - name: CONNECT_INTERNAL_VALUE_CONVERTER
          value: "org.apache.kafka.connect.json.JsonConverter"
        - name: CONNECT_OFFSET_FLUSH_INTERVAL_MS
          value: "60000"
        - name: CONNECT_OFFSET_FLUSH_TIMEOUT_MS
          value: "5000"
        - name: CONNECT_SHUTDOWN_TIMEOUT
          value: "10000"
        volumeMounts:
        - name: kafka-connect-plugins
          mountPath: /kafka/connect
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "400m"
        readinessProbe:
          httpGet:
            path: /
            port: 8083
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 8083
          initialDelaySeconds: 60
          periodSeconds: 30
      volumes:
      - name: kafka-connect-plugins
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-connect-service
spec:
  selector:
    app: kafka-connect
  ports:
  - name: connect
    port: 8083
    targetPort: 8083
  type: ClusterIP
