apiVersion: apps/v1
kind: Deployment
metadata:
  name: aggregation-service
  labels:
    app: aggregation-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: aggregation-service
  template:
    metadata:
      labels:
        app: aggregation-service
    spec:
      containers:
      - name: aggregation-service
        image: node:18-alpine
        ports:
        - containerPort: 3000
        env:
        - name: CLUSTER1_URI
          valueFrom:
            secretKeyRef:
              name: mongodb-secrets
              key: cluster1-uri
        - name: CLUSTER2_URI
          valueFrom:
            secretKeyRef:
              name: mongodb-secrets
              key: cluster2-uri
        - name: PORT
          value: "3000"
        workingDir: /app
        command: ["sh", "-c"]
        args:
        - |
          cp /workspace/package.json /app/
          cp /workspace/index.js /app/
          npm install
          npm start
        volumeMounts:
        - name: source-code
          mountPath: /workspace
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: source-code
        configMap:
          name: aggregation-source
---
apiVersion: v1
kind: Service
metadata:
  name: aggregation-service
spec:
  selector:
    app: aggregation-service
  ports:
  - name: http
    port: 3000
    targetPort: 3000
  type: ClusterIP
# MongoDB secrets are now managed centrally
# Run './scripts/generate-mongodb-secrets.sh' to create the mongodb-secrets
# The secret will be created with keys: cluster1-uri, cluster2-uri, mongo-password
